import getpass

# Функция для шифрования методом перестановки
def permutation_encrypt(text, key):
    columns = len(key)
    rows = (len(text) + columns - 1) // columns
    grid = [''] * columns
    
    for i, char in enumerate(text):
        grid[i % columns] += char
    
    sorted_key = sorted(list(enumerate(key)), key=lambda x: x[1])
    encrypted = ''.join(grid[i[0]] for i in sorted_key)
    
    return encrypted

# Функция для замены символов
def substitution_encrypt(text, key):
    alphabet = 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя'
    key_map = {alphabet[i]: key[i] for i in range(len(alphabet))}
    encrypted = ''.join(key_map.get(c, c) for c in text.lower())
    
    return encrypted

# Функция для расшифровки методом перестановки
def permutation_decrypt(text, key):
    columns = len(key)
    rows = (len(text) + columns - 1) // columns
    sorted_key = sorted(list(enumerate(key)), key=lambda x: x[1])
    
    grid = [''] * columns
    index = 0
    for i in sorted_key:
        grid[i[0]] = text[index:index + rows]
        index += rows

    decrypted = ''.join(''.join(row) for row in zip(*grid))
    
    return decrypted

# Функция для расшифровки замены символов
def substitution_decrypt(text, key):
    alphabet = 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя'
    key_map = {key[i]: alphabet[i] for i in range(len(alphabet))}
    decrypted = ''.join(key_map.get(c, c) for c in text.lower())
    
    return decrypted

# Ввод ключа без отображения
def get_hidden_key(prompt="Введите ключ: "):
    return getpass.getpass(prompt)

# Шифрование текста из файла
def encrypt_file(input_file, output_file):
    with open(input_file, 'r', encoding='utf-8') as file:
        text = file.read()

    permutation_key = get_hidden_key("Введите ключ для перестановки: ")
    substitution_key = get_hidden_key("Введите ключ для замены (33 символа): ")
    
    encrypted_text = permutation_encrypt(text, permutation_key)
    encrypted_text = substitution_encrypt(encrypted_text, substitution_key)
    
    with open(output_file, 'w', encoding='utf-8') as file:
        file.write(encrypted_text)
    
    print("Текст успешно зашифрован и сохранен в файл.")

# Расшифровка текста из файла
def decrypt_file(input_file, output_file=None):
    with open(input_file, 'r', encoding='utf-8') as file:
        text = file.read()

    permutation_key = get_hidden_key("Введите ключ для перестановки: ")
    substitution_key = get_hidden_key("Введите ключ для замены (33 символа): ")
    
    decrypted_text = substitution_decrypt(text, substitution_key)
    decrypted_text = permutation_decrypt(decrypted_text, permutation_key)
    
    if output_file:
        with open(output_file, 'w', encoding='utf-8') as file:
            file.write(decrypted_text)
        print("Текст успешно расшифрован и сохранен в файл.")
    else:
        print("Расшифрованный текст:")
        print(decrypted_text)

# Пример использования
if __name__ == "__main__":
    mode = input("Выберите режим (1 - шифрование, 2 - расшифровка): ")

    if mode == '1':
        input_file = input("Введите имя исходного файла для шифрования: ")
        output_file = input("Введите имя файла для сохранения шифрованного текста: ")
        encrypt_file(input_file, output_file)
    elif mode == '2':
        input_file = input("Введите имя файла с зашифрованным текстом: ")
        output_file = input("Введите имя файла для сохранения расшифрованного текста (или нажмите Enter для вывода на экран): ")
        decrypt_file(input_file, output_file if output_file else None)
    else:
        print("Неверный выбор режима.")