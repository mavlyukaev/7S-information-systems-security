import getpass
import os

# Функция для шифрования методом перестановки
def permutation_encrypt(text, key):
    print("Шифрование перестановкой...")  # Сообщение для отладки
    columns = len(key)
    rows = (len(text) + columns - 1) // columns  # Рассчитываем число строк
    print(f"Разбиваем текст на {rows} строк(и) и {columns} столбца(ов).")  # Отладка
    grid = [''] * columns
    
    for i, char in enumerate(text):
        grid[i % columns] += char
    
    print(f"Промежуточное состояние сетки: {grid}")  # Отладка

    sorted_key = sorted(list(enumerate(key)), key=lambda x: x[1])
    print(f"Отсортированный ключ: {sorted_key}")  # Отладка

    encrypted = ''.join(grid[i[0]] for i in sorted_key)
    print(f"Результат перестановочного шифрования: {encrypted}")  # Отладка
    
    return encrypted

# Функция для замены символов
def substitution_encrypt(text, key):
    print("Шифрование заменой...")  # Сообщение для отладки
    alphabet = 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя'
    key_map = {alphabet[i]: key[i] for i in range(len(alphabet))}
    encrypted = ''.join(key_map.get(c, c) for c in text.lower())
    
    print(f"Результат шифрования заменой: {encrypted}")  # Отладка
    return encrypted

# Ввод ключа без отображения
def get_hidden_key(prompt="Введите ключ: "):
    print(prompt)  # Для отладки: добавляем вывод сообщения о вводе
    return getpass.getpass(prompt)

# Шифрование текста из файла
def encrypt_file(input_file, output_file):
    try:
        # Проверка наличия файла
        if not os.path.exists(input_file):
            print(f"Ошибка: файл {input_file} не существует.")
            return
        
        print(f"Чтение из файла: {input_file}...")  # Сообщение для отладки
        with open(input_file, 'r', encoding='utf-8') as file:
            text = file.read()
        
        print("Текст успешно прочитан.")  # Сообщение для отладки
        
        # Ввод ключа для перестановки
        permutation_key = get_hidden_key("Введите ключ для перестановки: ")
        if not permutation_key:
            print("Ошибка: ключ для перестановки не может быть пустым!")
            return
        
        print("Ключ для перестановки введён.")  # Сообщение для отладки

        # Ввод ключа для замены
        substitution_key = get_hidden_key("Введите ключ для замены (33 символа): ")
        if len(substitution_key) != 33:
            print("Ошибка: ключ для замены должен быть длиной 33 символа!")
            return
        
        print("Ключ для замены введён.")  # Сообщение для отладки
        
        # Шифрование текста
        encrypted_text = permutation_encrypt(text, permutation_key)
        encrypted_text = substitution_encrypt(encrypted_text, substitution_key)
        
        # Запись зашифрованного текста в файл
        print(f"Запись шифрованного текста в файл: {output_file}...")  # Сообщение для отладки
        with open(output_file, 'w', encoding='utf-8') as file:
            file.write(encrypted_text)
        
        print("Текст успешно зашифрован и сохранён в файл.")
    
    except Exception as e:
        print(f"Ошибка: {e}")

# Пример использования
if __name__ == "__main__":
    mode = input("Выберите режим (1 - шифрование, 2 - расшифровка): ")

    if mode == '1':
        input_file = input("Введите имя исходного файла для шифрования: ")
        output_file = input("Введите имя файла для сохранения шифрованного текста: ")
        encrypt_file(input_file, output_file)
    else:
        print("Неверный выбор режима.")